● - What is `NPM`?
==>it does not stand for node package manager.If we want some external functionalities in our app we use bundlears.Bundlers are packages of js modules .if we want to use a package in our code we have to use a package manager.we use a package manager called as "npm" or yarn.A package contains all the files needed for a module and modules are the JavaScript libraries that can be included in Node project according to the requirement of the project.


● -What is `Parcel/Webpack`? Why do we need it?
==>If we want some external functionalities in our app we use bundlers.Bundlers are packages of js modules .if we want to use a package in our code we have to use a pachage manager.we use a package manager called as "npm" or yarn.
some examples of bundlers are :webPack,vite,parcel.
 Parcel and webpack remove the unnecessary comments, new lines, any kind of block delimiters, and white spaces while the functionality of the code remains unchanged.

need of parcel:
1.minify our code;
2.hot module replacement HMR
3.cleanm our codebase
4.caching
5.file watcher algorithm
6.managing dev and prod build.
7.image optimization
8.comperession 
9.Compatible with older version of browsers
10.manges port numbers
11.consistent hashing algorithm
12.bundling
13.super fast build algorithm
14.tree shaking algorithm


● - What is `.parcel-cache`
==>The .cache folder (or .parcel-cache in parcel v2) stores information about your project when parcel builds it, so that when it rebuilds, it doesn't have to re-parse and re-analyze everything from scratch. It's a key reason why parcel can be so fast in development mode. 


● - What is `npx` ?
==>Node Package Execute . It is an npm package runner that can execute any package that you want from the npm registry without even installing that package.Execute parcel with entry point as index.html
command: npx parcel index.html // for dev env
command: npx parcel  build index.html // for prod env

● - What is difference between `dependencies` vs `devDependencies`
==>Dependencies: In package.json file, there is an object called dependencies and it consists of all the packages that are used in the project with its version number. So, whenever you install any library that is required in your project that library you can find it in the dependencies object. 
npm install <package name>


In package.json file, there is an object called as dev Dependencies and it consists of all the packages that are used in the project in its development phase and not in the production or testing environment with its version number. So, whenever you want to install any library that is required only in your development phase then you can find it in the dev Dependencies object. 

Use the below command to add more dev Dep
npm install <package name> --save-dev


● - What is Tree Shaking?
==>Tree shaking is a term to describe the removal of dead code.It relies on the import and export statements to detect if code modules are exported and imported for use between JavaScript files.In modern JavaScript applications, we use module bundlers (e.g., webpack or Rollup) to automatically remove dead code when bundling multiple JavaScript files into single files. This is important for preparing code that is production ready, for example with clean structures and minimal file size.


● - What is Hot Module Replacement?

==>Hot module replacement is another functionality which is similar to the refreshing of the changed files without affecting the state of the application at any given point. .Hot Module Replacement (HMR) improves the development experience by automatically updating modules in the browser at runtime without needing a whole page refresh. This means that application state can be retained as you change small things. Parcel's HMR implementation supports both JavaScript and CSS assets.it updates the app without reloading.As you save files, Parcel rebuilds what changed and sends an update to any running clients containing the new code. The new code then replaces the old version, and is re-evaluated along with all parents. You can hook into this process using the module.hot API, which can notify your code when a module is about to be disposed, or when a new version comes in. Projects like react-hot-loader can help with this process, and work out of the box with Parcel.


● - List down your favourite 5 superpowers of Parcel and describe any 3 of them in your
own words.
==> 1.caching: when there are subsequenet changes in files,parcel takes every less time to make these changes reflect in the app.this is done by caching

2.parcel automatically removes comments from our code ,minifies it and cleans it.

3.it automatically comperesses our files and also does image optimization.


● - What is `.gitignore`? What should we add and not add into it?
==>it is file in which we put all the file names that we do not want to push to github.we can add files to this git ignore that can be regenerated using the available data.
FILES TO ADD TO GitIgnore: package.json ,package-lock,json
FILES NOT TO ADD TO GitIgnore: node modules,parcel-cache



● - What is the difference between `package.json` and `package-lock.json`
==>In every web application project, we have a file called package.json. This file contains all the relevant data regarding the project i.e. metadata. Starting from all the dependencies used to all the version numbers are present in the file.n the package.json file, each dependency can specify a range of valid versions using the semantic versioning scheme, allowing developers to auto-update their packages while at the same time avoiding unwanted breaking changes.


package-lock.json:this files contains the exact version of the dependency we are using .it locks the version of those packages.it also maintains hash of the version to crosscheck between production and developement environment


● - Why should I not modify `package-lock.json`?
==>package-lock.json:this files contains the exact version of the dependency we are using .it locks the version of those packages.it also maintains hash of the version to crosscheck between production and developement environment



● - What is `node_modules` ? Is it a good idea to push that on git?
==>Every Node.js application has modules. These modules form part of the building blocks of the application. They help developers work faster and write more structured code.all the packages that our application needs to run,are present in this node modules.
No it is not a good idea to push node modules to git,because it has comparatively large size which makes it difficult to be pushed on git


● - What is the `dist` folder?
==>The /dist folder contains the minimized version of the source code.
The code present in the /dist folder is actually the code which is used on production web applications.

● - What is `browserlists`
==>this list needs to be added in our package.json .parcel will make sure that app is working in all browsers and their versions .


Read about dif bundlers: vite, webpack, parcel
==>A bundler is a development tool that combines many JavaScript code files into a single one that is production-ready loadable in the browser. A fantastic feature of a bundler is that it generates a dependency graph as it traverses your first code files. This implies that beginning with the entry point you specified, the module bundler keeps track of both your source files’ dependencies and third-party dependencies. This dependency graph guarantees that all source and associated code files are kept up to date and error-free.




● Read about: ^ - caret and ~ - tilda
==>the version scheme is
major.minor.patch

caret:It is used for automatically updating the minor updates along with patch updates. The ^1.2.4 will update all the future Minor and patch updates, for example, ^1.2.4 will automatically change the dependency to 1.x.x if any update occurs. Using caret notation it is important to look at our code regularly if it is compatible with the newest version or not.

tilda:it update the patch version only.as it only update patch version ,there is no major difference between two versions.Tilde ~ notation freezes the major version and minor version.It is used to match the most recent patch version.  As we know patch updates are bug fixes that’s why we can say ~ notation allows us to automatically accept bug fixes. The ~1.2.0 will update all the future patch updates. We have to write just ~1.2.0 and all the next patch update dependencies. For example, 1.2.1, 1.2.2, 1.2.5……………1.2.x.
Note: Patch updates are very small security changes in a package that is why the ~version is approximately equivalent to the version


● Read about Script types in html 
==>attributes:
src:specifies the URI/path of an external script file;
async :executes the script asynchronously along with the rest of the page.
defer :xecutes the script after the document is parsed and before firing DOMContentLoaded event.
type :specifies the type of the containing script e.g. text\javascript, text\html, text\plain, application\json, application\pdf,module etc.